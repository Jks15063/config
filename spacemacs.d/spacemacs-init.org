* Layer Config
  Initialization function.
  This function is called at the very startup of Spacemacs initialization
  before layers configuration.
  You should not put any user code in there besides modifying the variable
  values.

  #+BEGIN_SRC emacs-lisp :exports none
    (defun dotspacemacs/layers ()
      (setq-default
  #+END_SRC

** Distribution
   Base distribution to use. This is a layer contained in the directory
   =+distribution=. For now available distributions are =spacemacs-base=
   or =spacemacs=. (default 'spacemacs)

   #+BEGIN_SRC emacs-lisp
   dotspacemacs-distribution 'spacemacs
   #+END_SRC

** Lazy Installation
   Lazy installation of layers (i.e. layers are installed only when a file
   with a supported type is opened). Possible values are =all=, =unused=
   and =nil=. =unused= will lazy install only unused layers (i.e. layers
   not listed in variable =dotspacemacs-configuration-layers=), =all= will
   lazy install any layer that support lazy installation even the layers
   listed in =dotspacemacs-configuration-layers=. =nil= disable the lazy
   installation feature and you have to explicitly list a layer in the
   variable =dotspacemacs-configuration-layers= to install it.
   (default 'unused)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-enable-lazy-installation 'unused
   #+END_SRC

** Ask for Lazy Installation
   If non-nil then Spacemacs will ask for confirmation before installing
   a layer lazily. (default t)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-ask-for-lazy-installation t
   #+END_SRC

** Layer path
   If non-nil layers with lazy install support are lazy installed.
   List of additional paths where to look for configuration layers.
   Paths must have a trailing slash (i.e. =~/.mycontribs/=)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-configuration-layer-path '()
   #+END_SRC

** Layers
   List of configuration layers to load.
   ----------------------------------------------------------------
   Example of useful layers you may want to use right away.
   Uncomment some layer names and press <SPC f e R> (Vim style) or
   <M-m f e R> (Emacs style) to install them.
   ----------------------------------------------------------------

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-configuration-layers
   '(
   #+END_SRC

*** Spacemacs defaults and misc
**** Emacs-lisp

    #+BEGIN_SRC emacs-lisp :exports none
      emacs-lisp
    #+END_SRC

**** Helm

    #+BEGIN_SRC emacs-lisp :exports none
      helm
    #+END_SRC

**** Dash

    #+BEGIN_SRC emacs-lisp :exports none
      dash
    #+END_SRC

**** spell-checking

   #+BEGIN_SRC emacs-lisp :exports none
   spell-checking
   #+END_SRC

**** syntax-checking

   #+BEGIN_SRC emacs-lisp :exports none
   syntax-checking
   #+END_SRC

**** auto-completion

   #+BEGIN_SRC emacs-lisp :exports none
   auto-completion
   #+END_SRC

**** html

   #+BEGIN_SRC emacs-lisp :exports none
   html
   #+END_SRC

**** yaml

   #+BEGIN_SRC emacs-lisp :exports none
   yaml
   #+END_SRC

**** Ranger

   #+BEGIN_SRC emacs-lisp :exports none
   ranger
   #+END_SRC

**** Markdown

   #+BEGIN_SRC emacs-lisp :exports none
   markdown
   #+END_SRC

**** Latex

   #+BEGIN_SRC emacs-lisp :exports none
   latex
   #+END_SRC

*** Org-mode

    #+BEGIN_SRC emacs-lisp :exports none
    org
    #+END_SRC

**** GTD
   #+BEGIN_SRC emacs-lisp :exports none
   gtd
   #+END_SRC

**** Finance
   #+BEGIN_SRC emacs-lisp :exports none
   finance
   #+END_SRC

*** Version Control

   #+BEGIN_SRC emacs-lisp :exports none
   version-control
   #+END_SRC

**** Git + Github

   #+BEGIN_SRC emacs-lisp :exports none
   git
   github
   #+END_SRC

*** Themes

   #+BEGIN_SRC emacs-lisp :exports none
   themes-megapack
   #+END_SRC

*** Colors

   #+BEGIN_SRC emacs-lisp :exports none
     (paintvars :variables ;; can change "paintvars" to "colors" after merge
                paintvars-colorize-identifiers 'all
                paintvars-enable-nyan-cat-progress-bar t)
   #+END_SRC

*** Languages
**** Ruby

   #+BEGIN_SRC emacs-lisp :exports none
   ruby
   ;; (ruby :variables ruby-version-manager 'chruby)
   (ruby :variables ruby-version-manager 'rvm)
   (ruby :variables ruby-test-runner 'rspec)
   #+END_SRC

**** Javascript

   #+BEGIN_SRC emacs-lisp :exports none
   javascript
   #+END_SRC

**** Elixir

   #+BEGIN_SRC emacs-lisp :exports none
   elixir
   #+END_SRC

**** Lua

   #+BEGIN_SRC emacs-lisp :exports none
   lua
   #+END_SRC

**** Haskell

   #+BEGIN_SRC emacs-lisp :exports none
   haskell
   #+END_SRC

**** Python

   #+BEGIN_SRC emacs-lisp :exports none
   python
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :exports none
   )
   #+END_SRC

** Packages
*** Additional
   List of additional packages that will be installed without being
   wrapped in a layer. If you need some configuration for these
   packages, then consider creating a layer. You can also put the
   configuration in `dotspacemacs/user-config'.

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-additional-packages '()
   #+END_SRC

*** Frozen
    A list of packages that cannot be updated.

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-frozen-packages '()
   #+END_SRC

*** Excluded
    A list of packages that will not be installed and loaded.

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-excluded-packages '()
   #+END_SRC

*** Install
    Defines the behaviour of Spacemacs when installing packages.
    Possible values are `used-only', `used-but-keep-unused' and =all=.
    `used-only' installs only explicitly used packages and uninstall any
    unused packages as well as their unused dependencies.
    `used-but-keep-unused' installs only the used packages but won't uninstall
    them if they become unused. =all= installs *all* packages supported by
    Spacemacs and never uninstall them. (default is `used-only')

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-install-packages 'used-only))
   #+END_SRC

* User Config
** User Init
   Initialization function for user code. It is called immediately after =dotspacemacs/init=.

#+BEGIN_SRC emacs-lisp :exports none
  (defun dotspacemacs/user-init ()
    (setq-default git-magit-status-fullscreen t))
#+END_SRC

** User Config
   Configuration function for user code.
   This function is called at the very end of Spacemacs initialization after
   layers configuration. You are free to put any user code.

   #+BEGIN_SRC emacs-lisp :exports none
(defun dotspacemacs/user-config ()
   #+END_SRC

*** Org-mode
    Load GTD

   #+BEGIN_SRC emacs-lisp :exports none
     (with-eval-after-load 'org
       (setq-default dotspacemacs-configuration-layers '(gtd)))
   #+END_SRC

*** Colors
    Paintvar color settings

   #+BEGIN_SRC emacs-lisp :exports none
   (paintvars/add-theme-sat&light 'material '(70 70))
   (paintvars/add-theme-sat&light 'spacemacs-dark '(45 70))
   (paintvars/refresh-theme-look)
   #+END_SRC

*** Misc

   #+BEGIN_SRC emacs-lisp :exports none
   (setq-default evil-escape-key-sequence "jk")
   (setq evil-escape-unordered-key-sequence t)
   (golden-ratio-mode)
   (indent-guide-global-mode t)
   (setq-default
   js-basic-offset 2
   js2-basic-offset 2
   js-indent-level 2)
   #+END_SRC

*** Include underscores in word motions
**** Ruby
   #+BEGIN_SRC emacs-lisp :exports none
   (add-hook 'ruby-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
   #+END_SRC

**** Javascript
   #+BEGIN_SRC emacs-lisp :exports none
   (add-hook 'js2-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
   #+END_SRC

*** Rebind surround to S instead of s
    So we can use s for avy

   #+BEGIN_SRC emacs-lisp :exports none
   (evil-define-key 'operator evil-surround-mode-map "S" 'evil-surround-edit)
   (evil-define-key 'visual evil-surround-mode-map "S" 'evil-surround-region)
   #+END_SRC

*** Avy Setup

   #+BEGIN_SRC emacs-lisp :exports none
   (evil-define-key '(normal motion) global-map "s" 'avy-goto-char-timer)
   (evil-define-key '(visual operator) evil-surround-mode-map "s" 'avy-goto-char-timer)

   (evil-define-key '(normal motion visual operator) global-map (kbd "C-;") 'avy-goto-line)

   (setq avy-all-windows nil)
   #+END_SRC

*** Multi-Cursor
    Courtesy of @quicknir

   #+BEGIN_SRC emacs-lisp :exports none
     (global-evil-mc-mode 1)

     (defun evil--mc-make-cursor-at-col-append (_startcol endcol orig-line)
       (end-of-line)
       (when (> endcol (current-column))
         (insert-char ?\s (- endcol (current-column))))
       (move-to-column (- endcol 1))
       (unless (= (line-number-at-pos) orig-line)
         (message (number-to-string (current-column)))
         (evil-mc-make-cursor-here)))

     (defun evil--mc-make-cursor-at-col-insert (startcol _endcol orig-line)
       (end-of-line)
       (unless (or (= (line-number-at-pos) orig-line) (> startcol (current-column)))
         (move-to-column startcol)
         (evil-mc-make-cursor-here)))

     (defun evil--mc-make-vertical-cursors (beg end func)
       (evil-mc-pause-cursors)
       (apply-on-rectangle func
                           beg end (line-number-at-pos (point)))
       (evil-mc-resume-cursors)
       (evil-normal-state)
       (move-to-column (evil-mc-column-number (min beg end)))
       )

     (defun evil-mc-insert-vertical-cursors (beg end)
       (interactive (list (region-beginning) (region-end)))
       (evil--mc-make-vertical-cursors beg end 'evil--mc-make-cursor-at-col-insert))

     (defun evil-mc-append-vertical-cursors (beg end)
       (interactive (list (region-beginning) (region-end)))
       (evil--mc-make-vertical-cursors beg end 'evil--mc-make-cursor-at-col-append))

     (evil-define-key 'visual global-map "gI" 'evil-mc-insert-vertical-cursors)
     (evil-define-key 'visual global-map "gA" 'evil-mc-append-vertical-cursors)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :exports none
  )
   #+END_SRC

* Spacemacs Init
  Initialization function.
  This function is called at the very startup of Spacemacs initialization before layers configuration.
  You should not put any user code in there besides modifying the variable values.

  This setq-default sexp is an exhaustive list of all the supported
  spacemacs settings.

  #+BEGIN_SRC emacs-lisp :exports none
    (defun dotspacemacs/init ()
      (setq-default
  #+END_SRC

** ELPA
*** HTTPS
    If non nil ELPA repositories are contacted via HTTPS whenever it's
    possible. Set it to nil if you have no way to use HTTPS in your
    environment, otherwise it is strongly recommended to let it set to t.
    This variable has no effect if Emacs is launched with the parameter
    =--insecure= which forces the value of this variable to nil.
    (default t)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-elpa-https t
   #+END_SRC

*** Timeout
    Maximum allowed time in seconds to contact an ELPA repository.

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-elpa-timeout 5
   #+END_SRC

*** Check for update
    If non nil then spacemacs will check for updates at startup
    when the current branch is not =develop=. Note that checking for
    new versions works via git commands, thus it calls GitHub services
    whenever you start Emacs. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-check-for-update nil
   #+END_SRC

*** Subdirectory
    If non-nil, a form that evaluates to a package directory. For example, to
    use different package directories for different Emacs versions, set this
    to =emacs-version=.

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-elpa-subdirectory nil
   #+END_SRC

*** Editing Style
    One of =vim=, =emacs= or =hybrid=.
    =hybrid= is like =vim= except that =insert state= is replaced by the
    =hybrid state= with =emacs= key bindings. The value can also be a list
    with =:variables= keyword (similar to layers). Check the editing styles
    section of the documentation for details on available variables.
    (default 'vim)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-editing-style 'vim
   #+END_SRC

*** Verbose Loading
    If non nil output loading progress in =*Messages*= buffer. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-verbose-loading nil
   #+END_SRC

*** Banner
    Specify the startup banner. Default value is =official=, it displays
    the official spacemacs logo. An integer value is the index of text
    banner, =random= chooses a random text banner in =core/banners=
    directory. A string value must be a path to an image format supported
    by your Emacs build.
    If the value is nil then no banner is displayed. (default 'official)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-startup-banner 'official
   #+END_SRC

*** Startup Buffer
    List of items to show in startup buffer or an association list of
    the form =(list-type . list-size)=. If nil then it is disabled.
    Possible values for list-type are:
    =recents= =bookmarks= =projects= =agenda= =todos=."
    List sizes may be nil, in which case
    =spacemacs-buffer-startup-lists-length= takes effect.

   #+BEGIN_SRC emacs-lisp :exports none
     dotspacemacs-startup-lists '((recents . 5)
                                  (projects . 7))
   #+END_SRC

**** Responsive
     True if the home buffer should respond to resize events.

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-startup-buffer-responsive t
   #+END_SRC

*** Scratch Buffer
    Default major mode of the scratch buffer (default =text-mode=)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-scratch-mode 'text-mode
   #+END_SRC

*** Themes
    List of themes, the first of the list is loaded when spacemacs starts.
    Press <SPC> T n to cycle to the next theme in the list (works great
    with 2 themes variants, one dark and one light)

   #+BEGIN_SRC emacs-lisp :exports none
     dotspacemacs-themes '(material
                           spacemacs-dark
                           majapahit)
   #+END_SRC

*** Cursor Color According to State
    If non nil the cursor color matches the state color in GUI Emacs.

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-colorize-cursor-according-to-state t
   #+END_SRC

*** Font
    Default font, or prioritized list of fonts. =powerline-scale= allows to
    quickly tweak the mode-line size to make separators look not too crappy.

   #+BEGIN_SRC emacs-lisp :exports none
     dotspacemacs-default-font '("DejaVu Sans Mono for Powerline"
                                 :size 24
                                 :weight normal
                                 :width normal
                                 :powerline-scale 1.1)
   #+END_SRC

*** Leader Key
    The leader key

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-leader-key "SPC"
   #+END_SRC

*** Command Key
    The key used for Emacs commands (M-x) (after pressing on the leader key).
    (default "SPC")

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-emacs-command-key "SPC"
   #+END_SRC

*** Vim Command Key
    The key used for Vim Ex commands (default ":")

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-ex-command-key ":"
   #+END_SRC

*** EX Command Key
    The leader key accessible in =emacs state= and =insert state=
    (default "M-m")

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-emacs-leader-key "M-m"
   #+END_SRC

*** Major Mode Leader Key
    Major mode leader key is a shortcut key which is the equivalent of
    pressing =<leader> m=. Set it to =nil= to disable it. (default ",")

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-major-mode-leader-key ","
   #+END_SRC

*** Emacs Major Mode Leader Key
    Major mode leader key accessible in =emacs state= and =insert state=.
    (default "C-M-m")

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   #+END_SRC

*** Distinguish GUI Tab
    These variables control whether separate commands are bound in the GUI to
    the key pairs C-i, TAB and C-m, RET.
    Setting it to a non-nil value, allows for separate commands under <C-i>
    and TAB or <C-m> and RET.
    In the terminal, these pairs are generally indistinguishable, so this only
    works in the GUI. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-distinguish-gui-tab t
   #+END_SRC

*** Remap line yank
    If non nil =Y= is remapped to =y$= in Evil states. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-remap-Y-to-y$ 1
   #+END_SRC

*** Retain visual State on shift
    If non-nil, the shift mappings =<= and =>= retain visual state if used
    there. (default t)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-retain-visual-state-on-shift t
   #+END_SRC

*** Visual Mode Line Move
    If non-nil, J and K move lines up and down when in visual mode.
    (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-visual-line-move-text nil
   #+END_SRC

*** Invert meaning of g
    If non nil, inverse the meaning of =g= in =:substitute= Evil ex-command.
    (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-ex-substitute-global nil
   #+END_SRC

*** Default Layout Name
    Name of the default layout (default "Default")

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-default-layout-name "Default"
   #+END_SRC

*** Display Default layout name in mode-line
    If non nil the default layout name is displayed in the mode-line.
    (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-display-default-layout nil
   #+END_SRC

*** Resume Layouts
    If non nil then the last auto saved layouts are resume automatically upon
    start. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-auto-resume-layouts nil
   #+END_SRC

*** Large File Warning
    Size (in MB) above which spacemacs will prompt to open the large file
    literally to avoid performance issues. Opening a file literally means that
    no major mode or minor modes are active. (default is 1)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-large-file-size 1
   #+END_SRC

*** Auto-save Location
    Location where to auto-save files. Possible values are =original= to
    auto-save the file in-place, =cache= to auto-save the file to another
    file stored in the cache directory and =nil= to disable auto-saving.
    (default 'cache)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-auto-save-file-location 'cache
   #+END_SRC

*** Max Rollback Slots in Cache
    Maximum number of rollback slots to keep in the cache. (default 5)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-max-rollback-slots 5
   #+END_SRC

*** Helm auto-resize
    If non nil, =helm= will try to minimize the space it uses. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-helm-resize nil
   #+END_SRC

*** Helm no header
    if non nil, the helm header is hidden when there is only one source.
    (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-helm-no-header nil
   #+END_SRC

*** Helm Position
    define the position to display =helm=, options are =bottom=, =top=,
    =left=, or =right=. (default 'bottom)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-helm-position 'bottom
   #+END_SRC

*** Helm use fuzzy
    Controls fuzzy matching in helm. If set to =always=, force fuzzy matching
    in all non-asynchronous sources. If set to =source=, preserve individual
    source settings. Else, disable fuzzy matching in all sources.
    (default 'always)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-helm-use-fuzzy 'always
   #+END_SRC

*** Enable Paste Micro State
    If non nil the paste micro-state is enabled. When enabled pressing `p`
    several times cycle between the kill ring content. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-enable-paste-transient-state nil
   #+END_SRC

*** Which Key Delay
    Which-key delay in seconds. The which-key buffer is the popup listing
    the commands bound to the current keystroke sequence. (default 0.4)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-which-key-delay 0.4
   #+END_SRC

*** Which Key Position
    Which-key frame position. Possible values are =right=, =bottom= and
    =right-then-bottom=. right-then-bottom tries to display the frame to the
    right; if there is insufficient space it displays it at the bottom.
    (default 'bottom)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-which-key-position 'bottom
   #+END_SRC

*** Display Progress Bar
    If non nil a progress bar is displayed when spacemacs is loading. This
    may increase the boot time on some systems and emacs builds, set it to
    nil to boost the loading time. (default t)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-loading-progress-bar t
   #+END_SRC

*** Fullscreen on Startup
    If non nil the frame is fullscreen when Emacs starts up. (default nil)
    (Emacs 24.4+ only)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-fullscreen-at-startup nil
   #+END_SRC

*** Toggle Fullscreen
    If non nil =spacemacs/toggle-fullscreen= will not use native fullscreen.
    Use to disable fullscreen animations in OSX. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-fullscreen-use-non-native nil
   #+END_SRC

*** Maximize on startup
    If non nil the frame is maximized when Emacs starts up.
    Takes effect only if =dotspacemacs-fullscreen-at-startup= is nil.
    (default nil) (Emacs 24.4+ only)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-maximized-at-startup nil
   #+END_SRC

*** Active Transparency
    A value from the range (0..100), in increasing opacity, which describes
    the transparency level of a frame when it's active or selected.
    Transparency can be toggled through =toggle-transparency=. (default 90)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-active-transparency 90
   #+END_SRC

*** Inactive Transparency
    A value from the range (0..100), in increasing opacity, which describes
    the transparency level of a frame when it's inactive or deselected.
    Transparency can be toggled through =toggle-transparency=. (default 90)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-inactive-transparency 90
   #+END_SRC

*** Show Transient State Title
    If non nil show the titles of transient states. (default t)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-show-transient-state-title t
   #+END_SRC

*** Show Transient State Color Guide
    If non nil show the color guide hint for transient state keys. (default t)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-show-transient-state-color-guide t
   #+END_SRC

*** Show unicode symbols in mode line
    If non nil unicode symbols are displayed in the mode line. (default t)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-mode-line-unicode-symbols t
   #+END_SRC

*** Smooth Scrolling
    If non nil smooth scrolling (native-scrolling) is enabled. Smooth
    scrolling overrides the default behavior of Emacs which recenters point
    when it reaches the top or bottom of the screen. (default t)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-smooth-scrolling t
   #+END_SRC

*** Line Numbers
    If non nil line numbers are turned on in all `prog-mode' and `text-mode'
    derivatives. If set to `relative', also turns on relative line numbers.
    (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-line-numbers nil
   #+END_SRC

*** Code Folding Method
    Code folding method. Possible values are `evil' and `origami'.
    (default 'evil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-folding-method 'origami
   #+END_SRC

*** Smartparens Strict Mode
    If non-nil smartparens-strict-mode will be enabled in programming modes.
    (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-smartparens-strict-mode nil
   #+END_SRC

*** Closing Parens
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-smart-closing-parenthesis nil
   #+END_SRC

*** Highlight Delimiters
    Select a scope to highlight delimiters. Possible values are `any',
    `current', =all= or =nil=. Default is =all= (highlight any scope and
    emphasis the current one). (default 'all)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-highlight-delimiters 'all
   #+END_SRC

*** Persistent Server
    If non nil, advise quit functions to keep server open when quitting.
    (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-persistent-server nil
   #+END_SRC

*** Search Tools
    List of search tool executable names. Spacemacs uses the first installed
    tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
    (default '("ag" "pt" "ack" "grep"))

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-search-tools '("ag" "ack" "pt" "grep")
   #+END_SRC

*** Package Repo
    The default package repository used if no explicit repository has been
    specified with an installed package.
    Not used for now. (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-default-package-repository nil
   #+END_SRC

*** Whitespace Cleanup
   Delete whitespace while saving buffer. Possible values are =all=
   to aggressively delete empty line and long sequences of whitespace,
   =trailing= to delete only the whitespace at end of lines, =changed= to
   delete only whitespace for changed lines or =nil= to disable cleanup.
   (default nil)

   #+BEGIN_SRC emacs-lisp :exports none
   dotspacemacs-whitespace-cleanup 'trailing
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :exports none
   ))
   #+END_SRC
* Custom Set Variables
  Do not write anything past this comment. This is where Emacs will
  auto-generate custom variable definitions.

  custom-set-variables was added by Custom.
  If you edit it by hand, you could mess it up, so be careful.
  Your init file should contain only one such instance.
  If there is more than one, they won't work right.

   #+BEGIN_SRC emacs-lisp :exports none
(custom-set-variables
 '(ansi-color-names-vector
   ["#0a0814" "#f2241f" "#67b11d" "#b1951d" "#4f97d7" "#a31db1" "#28def0" "#b2b2b2"])
 '(compilation-message-face (quote default))
 '(evil-want-Y-yank-to-eol 1)
 '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
 '(highlight-tail-colors
   (quote
    (("#20240E" . 0)
     ("#679A01" . 20)
     ("#4BBEAE" . 30)
     ("#1DB4D0" . 50)
     ("#9A8F21" . 60)
     ("#A75B00" . 70)
     ("#F309DF" . 85)
     ("#20240E" . 100))))
 '(magit-diff-use-overlays nil)
 '(org-agenda-files (quote ("~/org/" "~/org/ghost_group")))
 '(package-selected-packages
   (quote
    (autothemer atomic-chrome rainbow-mode rainbow-identifiers color-identifiers-mode zonokai-theme zenburn-theme zen-and-art-theme underwater-theme ujelly-theme twilight-theme twilight-bright-theme twilight-anti-bright-theme tronesque-theme toxi-theme tao-theme tangotango-theme tango-plus-theme tango-2-theme sunny-day-theme sublime-themes subatomic256-theme subatomic-theme spacegray-theme soothe-theme soft-stone-theme soft-morning-theme soft-charcoal-theme smyx-theme seti-theme reverse-theme railscasts-theme purple-haze-theme professional-theme planet-theme phoenix-dark-pink-theme phoenix-dark-mono-theme pastels-on-dark-theme organic-green-theme omtose-phellack-theme oldlace-theme occidental-theme obsidian-theme noctilux-theme niflheim-theme naquadah-theme mustang-theme monochrome-theme moe-theme minimal-theme majapahit-theme lush-theme light-soap-theme jbeans-theme jazz-theme ir-black-theme inkpot-theme heroku-theme hemisu-theme hc-zenburn-theme gruvbox-theme gruber-darker-theme grandshell-theme gotham-theme gandalf-theme flatui-theme flatland-theme firebelly-theme farmhouse-theme espresso-theme dracula-theme django-theme darktooth-theme darkokai-theme darkmine-theme darkburn-theme dakrone-theme cyberpunk-theme color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized clues-theme cherry-blossom-theme busybee-theme bubbleberry-theme birds-of-paradise-plus-theme badwolf-theme apropospriate-theme anti-zenburn-theme ample-zen-theme ample-theme alect-themes afternoon-theme material-theme yapfify pyvenv pytest pyenv-mode py-isort pip-requirements live-py-mode hy-mode helm-pydoc cython-mode company-anaconda anaconda-mode pythonic reveal-in-osx-finder pbcopy osx-trash osx-dictionary launchctl auctex-latexmk company-auctex auctex magit-gh-pulls github-search github-clone github-browse-file gist gh marshal logito ht mmm-mode markdown-toc markdown-mode gh-md deft origami helm-dash dash-at-point pcache web-mode tagedit slim-mode scss-mode sass-mode pug-mode less-css-mode helm-css-scss haml-mode emmet-mode company-web web-completion-data yaml-mode rcirc-notify rcirc-color intero hlint-refactor hindent helm-hoogle haskell-snippets flycheck-haskell company-ghci company-ghc ghc haskell-mode company-cabal cmm-mode ob-elixir flycheck-mix alchemist elixir-mode flyspell-correct-helm flyspell-correct auto-dictionary molokai-theme monokai-theme git-gutter-fringe+ git-gutter-fringe fringe-helper git-gutter+ git-gutter diff-hl smeargle orgit org-projectile org-present org org-pomodoro alert log4e gntp org-download magit-gitflow htmlize helm-gitignore helm-company helm-c-yasnippet gnuplot gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link flycheck-pos-tip pos-tip flycheck evil-magit magit magit-popup git-commit with-editor company-tern dash-functional tern company-statistics company auto-yasnippet ac-ispell auto-complete web-beautify livid-mode skewer-mode simple-httpd json-mode json-snatcher json-reformat js2-refactor yasnippet multiple-cursors js2-mode js-doc coffee-mode rvm ruby-tools ruby-test-mode rubocop rspec-mode robe rbenv rake minitest chruby bundler inf-ruby ws-butler window-numbering which-key volatile-highlights vi-tilde-fringe uuidgen use-package toc-org spaceline powerline restart-emacs request rainbow-delimiters popwin persp-mode pcre2el paradox spinner org-plus-contrib org-bullets open-junk-file neotree move-text macrostep lorem-ipsum linum-relative link-hint info+ indent-guide ido-vertical-mode hydra hungry-delete hl-todo highlight-parentheses highlight-numbers parent-mode highlight-indentation hide-comnt help-fns+ helm-themes helm-swoop helm-projectile helm-mode-manager helm-make projectile pkg-info epl helm-flx helm-descbinds helm-ag google-translate golden-ratio flx-ido flx fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state smartparens evil-indent-plus evil-iedit-state iedit evil-exchange evil-escape evil-ediff evil-args evil-anzu anzu evil goto-chg undo-tree eval-sexp-fu highlight elisp-slime-nav dumb-jump f s diminish define-word column-enforce-mode clean-aindent-mode bind-map bind-key auto-highlight-symbol auto-compile packed dash aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line helm avy helm-core popup async quelpa package-build spacemacs-theme)))
 '(pos-tip-background-color "#A6E22E")
 '(pos-tip-foreground-color "#272822")
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#F92672")
     (40 . "#CF4F1F")
     (60 . "#C26C0F")
     (80 . "#E6DB74")
     (100 . "#AB8C00")
     (120 . "#A18F00")
     (140 . "#989200")
     (160 . "#8E9500")
     (180 . "#A6E22E")
     (200 . "#729A1E")
     (220 . "#609C3C")
     (240 . "#4E9D5B")
     (260 . "#3C9F79")
     (280 . "#A1EFE4")
     (300 . "#299BA6")
     (320 . "#2896B5")
     (340 . "#2790C3")
     (360 . "#66D9EF"))))
 '(vc-annotate-very-old-color nil)
 '(weechat-color-list
   (unspecified "#272822" "#20240E" "#F70057" "#F92672" "#86C30D" "#A6E22E" "#BEB244" "#E6DB74" "#40CAE4" "#66D9EF" "#FB35EA" "#FD5FF0" "#74DBCD" "#A1EFE4" "#F8F8F2" "#F8F8F0")))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
   #+END_SRC
